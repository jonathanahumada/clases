* Repaso: Paso de parámetros
En Java, el paso de parámetros SIEMPRE es por valor, a menos de que se esté tratando con tipos de datos primitivos.
Por eso, los data types se dividen en:
1) Primitive types;
2) Reference types;

** Los valores son referencias
El valor de un reference type *es* la referencia. Por eso, *aunque se pasa por valor, lo que se pasa es la referencia*.
*** ¿Qué son referencias?
Q. ¿Qué se entiende pr referencia?

A. La referencia siempre denota la posición en memoria.
** Ejemplo
Para ilustrar el paso de referencias por valores, Arles nos muestra varios casos de un swap.
Primero con primitivos y luego con objetos. 



*** Primitivos

#+BEGIN_SRC 

/**
 * This example pretends to show that Arguments passed to Java methods are passed by value. 
 * That is, a copy of the arguments is made and passed to the corresponding parameters.
 * @author Arles
 */
public class TestSwap {
    
    public static void swap(int x, int y) {
        int temp; 
        temp = x;
        x = y;
        y = temp;
    }

public static void main(String[] args) {
        int a=4;
        int b=5;
        swap(a, b);
        System.out.println("a=" + a); // 4
        System.out.println("b=" + b); // 5
    }
    

#+END_SRC

Como se pasan parámetros por valor, los enteros 4 y 5 se copian y luego se asignan a variables temporales, solo existentes
dentro del bloque del método. Las variables `a`y `b` permanecen con su valor original.

*** Con los wrappers Integer()

No entendí muy bien por qué esto no funciona. 
*** TODO preguntar 


#+BEGIN_SRC
public class TestSwap2 {

    public static void swap(Object x, Object y) {
        Object temp;
        temp = x; // entra referencia a `a`
        x = y; // entra referencia a `y`
        y = temp; // pasa referencia a `a`

    }

    public static void main(String[] args) {
        Integer a = new Integer(4);
        Integer b = new Integer(5);
        swap(a, b);
        System.out.println("a=" + a); // 4
        System.out.println("b=" + b); // 5
    }
}


#+END_SRC

*** Este sí sirve
Puedo crear estructuras de dato de clase objeto.
Si pasamos propiedades de objetos, estamos pasando referencias. Por lo tanto,
modificarlo lo cambia en todas las variables que tengan la referencia.
#+BEGIN_SRC 
class Wrapper {

    public Object obj;
}

public class TestSwap3 {

    public static void swap(Wrapper x, Wrapper y) {
        Object temp = x.obj;
        x.obj = y.obj;
        y.obj = temp;

// El punto aquí es que x.obj y y.obj tienen la misma referencia que a y b en el main. Por eso *sí* cambia el valor en el main
    }

    public static void main(String[] args) {
        Wrapper a = new Wrapper();
        a.obj = 4;
        Wrapper b = new Wrapper();
        b.obj = 5;
        swap(a, b);
        System.out.println("a=" + a.obj);
        System.out.println("b=" + b.obj);
    }

}

#+END_SRC


* TODO Respuesta a ejercicio de Adivina!
Como son enteros, el promedio debe sacarse con +1. No entendí bien por qué
toca revisar.




* Explicación de una lista con clases
Aquí es importante entender cómo funcionan las referencias.
Cada nodo de la lista puede contener a object. Es decir, cualquier cosa. 

#+BEGIN_SRC ditaa:file nodo.png

 +-----------------+	 +-----------------+
 |  Nodo       	   |	 |   Lista         |
 |             	   |	 |                 |
 | info: object	   |<--- |  first: Node    |
 |             	   |	 |                 |
 | next: Node  	   |	 |                 |
 |             	   |	 |                 |
 |                 |	 |                 |
 +-----------------+	 +-----------------+

#+END_SRC
 

* Objetos
"Una clase es una colección de atributos y métodos".

*** herencia: repaso

*** abstract: repaso

*** Polimorfismo
Como resuelvo 'el problema fundamental del polimorfismo': toca volver a castear hacia abajo.
#+BEGIN_SRC 



#+END_SRC
* Error de netbeans
Este error sale en el computador de la universidad, cuando corro Netbeans en Ubuntu:
#+BEGIN_SRC 
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.netbeans.ProxyURLStreamHandlerFactory (file:/usr/share/netbeans/platform18/lib/boot.jar) to field java.net.URL.handler
WARNING: Please consider reporting this to the maintainers of org.netbeans.ProxyURLStreamHandlerFactory
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
#+END_SRC


