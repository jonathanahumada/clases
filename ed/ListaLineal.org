#+INCLUDE: "./ed_recursividad.org"
#+INCLUDE: "./Recursividad_2.org"
#+INCLUDE: "./Referencias.org"
#+LANGUAGE: esp
#+EXPORT_FILE_NAME:Estructuras de datos, comp.I
* Lista Lineal
** ¿Qué es una lista lineal?
Primero que todo, 
- es un ADT (abstract data structure), es decir, su definición está separada de su implementación.
- se define matematicamenta como una secuencia de elementos finitos
- finitos = tiene length
- tienen posición y esta se denota mediante un subindice

** Implementación del ADT
La implementación más abstracta del linear list dentro de Java viene en la forma de una interfaz:

#+BEGIN_SRC java
public interface LinearList {

    public boolean isEmpty();

    public int size();

    public Object get(int index);

    public int indexOf(Object theElement);

    public Object remove(int index);

    public void add(int index, Object theElement);

    public String toString();
}



#+END_SRC

Este contrato satisface la definición según el ADT de una linear list.

Ahora bien, la linear list se puede implementar:
1) Como arreglo
2) Como lista enlazada (linked list)

*** Linked List
**** Código
#+BEGIN_SRC java
package tallerlinearlist;

import utilities.ChangeArrayLength;



/**
 *
 * @author Arles
 */
public class ArrayLinearList implements LinearList {

    // data members
    protected Object[] element; // array of elements
    protected int size; // number of elements in array

    /**
     * create a list with initial capacity initialCapacity
     *
     * @throws IllegalArgumentException when initialCapacity < 1
     */
    public ArrayLinearList(int initialCapacity) {
        if (initialCapacity < 1) {
            throw new IllegalArgumentException("initialCapacity must be >= 1");
        }
        element = new Object[initialCapacity];
    }

    /**
     * create a list with initial capacity 10
     */
    public ArrayLinearList() {// use default capacity of 10
        this(10);
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public int size() {
        return size;
    }

    /**
     * @throws IndexOutOfBoundsException when index is not between 0 and size -
     * 1
     */
    void checkIndex(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("index = " + index + " size = " + size);
        }
    }

    /**
     * @return element with specified index
     * @throws IndexOutOfBoundsException when index is not between 0 and size -
     * 1
     */
    @Override
    public Object get(int index) {
        checkIndex(index);
        return element[index];
    }

    /**
     * @return index of first occurrence of theElement, return -1 if theElement
     * not in list
     */
    @Override
    public int indexOf(Object theElement) {
        // search element[] for theElement
        for (int i = 0; i < size; i++) {
            if (element[i].equals(theElement)) {
                return i;
            }
        }
        // theElement not found
        return -1;
    }

    /**
     * Remove the element with specified index. All elements with higher index
     * have their index reduced by 1.
     *
     * @throws IndexOutOfBoundsException when index is not between 0 and size -
     * 1
     * @return removed element
     */
    public Object remove(int index) {
        checkIndex(index);
        // valid index, shift elements with higher index
        Object removedElement = element[index];
        for (int i = index + 1; i < size; i++) {
            element[i - 1] = element[i];
        }
        element[--size] = null;
        return removedElement;
    }

    /**
     * All elements with equal or higher index have their index increased by 1.
     *
     * @param index
     * @param theElement
     * @throws IndexOutOfBoundsException when index is not between 0 and size
     */
    @Override
    public void add(int index, Object theElement) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("index = " + index + " size = " + size);
        }
        if (size == element.length) // no space, double capacity
        {
            element = ChangeArrayLength.changeLength1D(element, 2 * size);
        }
        // shift elements right one position
        for (int i = size - 1; i >= index; i--) {
            element[i + 1] = element[i];
        }
        element[index] = theElement;
        size++;
    }

    /**
     * convert to a string
     */
    @Override
    public String toString() {
        StringBuffer s = new StringBuffer("[");
        // put elements into the buffer
        for (int i = 0; i < size; i++) {
            if (element[i] == null) {
                s.append("null, ");
            } else {
                s.append(element[i].toString() + ", ");
            }
        }
        if (size > 0) {
            s.delete(s.length() - 2, s.length());
        }
        s.append("]");
        // create equivalent String
        return new String(s);
    }


#+END_SRC
*** Comentario
- hay una distinción entre size y length
- size = numero de elementos el arreglo
- size es un contador que se incrementa con cada llamada a add()
- length es el 'initial capacity', según lo dictamina la definición de un arreglo. (hay que saber de qué tamaño es el arreglo antes de inicializarlo)
- el length solo se  toca 1) en el constructor,
- por defecto es 10 según la política de java,
- y 2) cuando size = length al agregar más elementos que los que permite su capacidad inicial
- En ese caso se llama changeArraylength(), que duplica su capacidad (O(n^2))
- Dentro de changeArrayLength() se hace una llamada al sistema con *arrayCopy()*
- Lo que hace array copy es qu directamente copia los bytes desde una posición en memoria a otra
- es mucho más rápido que trabajar con las abstracciones de un lenguaje de programación
- se hace un shift de todos los elementos para ingresarlo en el indez
- curiosidad: checkindex se abstrae porque es más cómodo
- muchos métodos retornan -1, según lo estipula el ADT
- el toString() hace append una string "null" si es nulo. (Soluciona lo de null pointer exception)
- se usa el StringBuffer para concatenar cómodamente
- Se cuenta con el hecho de que cada elemento tenga su correspondiente toString(),

