<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="esp" xml:lang="esp">
<head>
<title>Recursividad, introducción Recursividad, segunda parte Referencias, segunda parte</title>
<!-- 2019-03-13 Wed 18:23 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Jonatan Ahumada Fernández" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<style>body { font-family: 'Crimson Text', serif;   font-size: 20px; color: #cf8e6b;  background-color: #273b49;} </style>
<style> #content{    width: 60%;    position: center;    margin-left: auto; margin-right: auto;} </style>
<style> a {  color:#f5b43c;}</style>
<style>body { font-family: 'Crimson Text', serif;   font-size: 20px; color: #cf8e6b;  background-color: #273b49;} </style>
<style> #content{    width: 60%;    position: center;    margin-left: auto; margin-right: auto;} </style>
<style> a {  color:#f5b43c;}</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Recursividad, introducción Recursividad, segunda parte Referencias, segunda parte</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Recursividad</a>
<ul>
<li><a href="#sec-1-1">1.1. Definición débil</a></li>
<li><a href="#sec-1-2">1.2. Ejemplos</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. listas</a></li>
<li><a href="#sec-1-2-2">1.2.2. combinaciones</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. Lista Lineal</a>
<ul>
<li><a href="#sec-2-1">2.1. ¿Qué es una lista lineal?</a></li>
<li><a href="#sec-2-2">2.2. Implementación del ADT</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1. Linked List</a></li>
<li><a href="#sec-2-2-2">2.2.2. Comentario</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Recursividad</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Definición débil</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>se define por casos.
</li>
<li>f se debe usar en su definición.
</li>
<li>al menos uno de los otros casos se define usando los argumentos a f.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Ejemplos</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Para resolver los ejemplos. Según lo que es usual, se tiene que:
</p>
<ol class="org-ol">
<li>identificar variables.
</li>
<li>expresar la función en términos de dominio y rango.
</li>
<li>identificar los casos no recursivos. Es decir, donde da un valor fijo.
</li>
<li>encontrar la expresión recursiva. (usualmente implica un decremento)
</li>
</ol>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> listas</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
"Como se van a listar todas las formas posibles en que se pueden organizar las cartas, el
orden sí importa".
</p>

<p>
La expresión general de las listas es n!. 
</p>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> combinaciones</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
"Como se van a formar parejas, el orden no importa".
La notacion `C(n, k) = c' quiere decir `n = elementos  del conjunto`
y `k = numero de elementos de la combinación` y `c = numero de conjuntos
e k elementos.
</p>
</div>

<ol class="org-ol"><li><a id="sec-1-2-2-1" name="sec-1-2-2-1"></a>Recursicidad (continuación)<br  /><ol class="org-ol"><li><a id="sec-1-2-2-1-1" name="sec-1-2-2-1-1"></a>lenguajes funcionales<br  /><div class="outline-text-6" id="text-1-2-2-1-1">
<p>
Comencemos, pues, por un enigma:
</p>
<blockquote>
<p>
"El lenguaje funcional es más fácil de interpretar por las máquinas." &#x2013;Arles Rodríguez
</p>
</blockquote>

<ul class="org-ul">
<li>Se supone que la definición fuerte de recursividad es comprensible así como están.
</li>
<li>Hay una conexión entre la notación funcional y la sintaxis de Lisp (que no logro hacer consciente). 
</li>
</ul>
</div>
</li>

<li><a id="sec-1-2-2-1-2" name="sec-1-2-2-1-2"></a>Sobre la ejecución en la máquina<br  /><div class="outline-text-6" id="text-1-2-2-1-2">
<p>
La máquina siempre evalúa de izquierda a derecha (según la precedencia usual).
En las combinaciones, es interesante notar que primero el término izquierdo de la 
expresión se evalúa recursivamente hasta llegar al caso base y luego pasa al derecho: 
</p>

<pre class="example">
C(4,2)= C(3,1) + C(3,2)
     =  (C()+ C() ) + C(3,2)
     = (1 + C()) + C(3,2)   //etc.
</pre>
</div>
</li>
<li><a id="sec-1-2-2-1-3" name="sec-1-2-2-1-3"></a>Ordenamientos<br  /><div class="outline-text-6" id="text-1-2-2-1-3">
<p>
La estrategia general de los ordenamientos
es escoger uno de los elementos del conjunto.
Luego, dibujar un árbol de posibilidades de
ordenamiento.
Nótese que:
</p>

<ol class="org-ol">
<li>solo un llamado recursivo (producto).
</li>
<li>no es un árbol "per se", aunque se representa como árbol // Aclarar esto
</li>
</ol>
</div>
</li>

<li><a id="sec-1-2-2-1-4" name="sec-1-2-2-1-4"></a>Ejemplo<br  /><div class="outline-text-6" id="text-1-2-2-1-4">
<p>
Suponga que selecciona cuatro cartas distintas de una baraja de póker, que se van a
representar por los símboloes (T,D,C,P). ¿De cuántas formas puedo ordenar estas 4 cartas?
</p>
</div>

<ol class="org-ol"><li><a id="sec-1-2-2-1-4-1" name="sec-1-2-2-1-4-1"></a>Procedimiento<br  /><div class="outline-text-7" id="text-1-2-2-1-4-1">
<ol class="org-ol">
<li>selecciona un elemento
</li>

<li>Dibuja ur árbol de posibilidades a partir de ese elemento.
<div class="org-src-container">

<pre class="src src-ditaa">                C------P  
      D+--------|     
      |         P------C
      |          D------P  
T ----C+--------|      
      |         P------D   
      |               
      |         D-----C 
      P+--------|  
                C-----D
</pre>
</div>
</li>

<li>Repite el árbol de posibilidades  por cada elemento.

<div class="org-src-container">

<pre class="src src-ditaa">                C------P  
      D+--------|     
      |         P------C
      |         D------P  
T ----C+--------|      
      |         P------D   
      |               
      |         D-----C 
      P+--------|  
                C-----D          x n veces, donde n es la norma del conjunto
</pre>
</div>
</li>
</ol>



<ol class="org-ol">
<li>Expresión matemática = n!
</li>
</ol>
</div>
</li>


<li><a id="sec-1-2-2-1-4-2" name="sec-1-2-2-1-4-2"></a>Solución<br  /><div class="outline-text-7" id="text-1-2-2-1-4-2">
<p>
hay 24 ordenamientos 4!.
</p>


<pre class="example">
ordenar(x) = x ordenar(x-1)
</pre>
</div>
</li></ol>
</li>

<li><a id="sec-1-2-2-1-5" name="sec-1-2-2-1-5"></a>Combinaciones<br  /><div class="outline-text-6" id="text-1-2-2-1-5">
<p>
La estrategia general de las combinaciones es similar al de las listas, 
pero como el orden no importa habrá menos. Nótese lo siguiente:
</p>

<ol class="org-ol">
<li>Solo habrá un árbol.
</li>
<li>recursivamente, una combinación implica una suma (ver ejemplo)
</li>
<li>Hay que saber de qué tamaño sera el subconjunto que se debe formar.
</li>
<li>Cada nodo del árbol se divide en si sí o no usar un elemento dentro de los subconjuntos.
</li>
<li>ordenar elementos es a factorial, como escoger subconjuntos a combinatorias
</li>
</ol>
</div>

<ol class="org-ol"><li><a id="sec-1-2-2-1-5-1" name="sec-1-2-2-1-5-1"></a>Ejemplo<br  /><div class="outline-text-7" id="text-1-2-2-1-5-1">
<p>
¿De cuantas formas se pueden formar parejas de la familia
Simpson para que suban al vagón de la montaña rusa?
</p>
</div>
</li>


<li><a id="sec-1-2-2-1-5-2" name="sec-1-2-2-1-5-2"></a>Prodecimiento<br  /><div class="outline-text-7" id="text-1-2-2-1-5-2">
<ol class="org-ol">
<li>Se escoge un elemento arbitrario del conjunto.
</li>
<li>Se bifurcan dos ramas de esa escogencia, dependiendo de si se escogió o no.
</li>
<li>En un lado el numero de elementos del subconjunto disminuye.
</li>
<li>En cada fila el número de elementos del conjunto disminuye. 
</li>
</ol>



<div class="org-src-container">

<pre class="src src-ditaa">                C(4,2)
               /  \
              /    \
             /      \
            /        \
           /          \
          /            \
         /              \
        C(3,1)           C(3,2)
 +-----------+     +------------+
 |           |     |            |
 |           |     |            |
 |           |     |            |
 |           |     |            |
C(2,0)  C(2,1)    C(2,1)       C(2,2)|
          +---+   +--+
          |   |   |  |
          |   |C(1,0)C(1,1) 
     C(1,0) C(1,1)
</pre>
</div>
</div>
</li>


<li><a id="sec-1-2-2-1-5-3" name="sec-1-2-2-1-5-3"></a>Solución<br  /><div class="outline-text-7" id="text-1-2-2-1-5-3">
<p>
Son 6 combinaciones. 
</p>
</div>
<ol class="org-ol"><li><a id="sec-1-2-2-1-5-3-1" name="sec-1-2-2-1-5-3-1"></a>Referencias<br  /><ol class="org-ol"><li><a id="sec-1-2-2-1-5-3-1-1" name="sec-1-2-2-1-5-3-1-1"></a>Repaso: Paso de parámetros<br  /><div class="outline-text-9" id="text-1-2-2-1-5-3-1-1">
<p>
En Java, el paso de parámetros SIEMPRE es por valor, a menos de que se esté tratando con tipos de datos primitivos.
Por eso, los data types se dividen en:
</p>
<ol class="org-ol">
<li>Primitive types;
</li>
<li>Reference types;
</li>
</ol>
</div>
</li>

<li><a id="sec-1-2-2-1-5-3-1-2" name="sec-1-2-2-1-5-3-1-2"></a>Los valores son referencias<br  /><div class="outline-text-9" id="text-1-2-2-1-5-3-1-2">
<p>
El valor de un reference type <b>es</b> la referencia. Por eso, <b>aunque se pasa por valor, lo que se pasa es la referencia</b>.
</p>
</div>
<ol class="org-ol"><li><a id="sec-1-2-2-1-5-3-1-2-1" name="sec-1-2-2-1-5-3-1-2-1"></a>¿Qué son referencias?<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-2-1">
<p>
Q. ¿Qué se entiende pr referencia?
</p>

<p>
A. La referencia siempre denota la posición en memoria.
</p>
</div>
</li></ol>
</li>
<li><a id="sec-1-2-2-1-5-3-1-3" name="sec-1-2-2-1-5-3-1-3"></a>Ejemplo<br  /><div class="outline-text-9" id="text-1-2-2-1-5-3-1-3">
<p>
Para ilustrar el paso de referencias por valores, Arles nos muestra varios casos de un swap.
Primero con primitivos y luego con objetos. 
</p>
</div>

<ol class="org-ol"><li><a id="sec-1-2-2-1-5-3-1-3-1" name="sec-1-2-2-1-5-3-1-3-1"></a>Primitivos<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-3-1">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #95e454;">/**</span>
<span style="color: #95e454;"> * This example pretends to show that Arguments passed to Java methods are passed by value. </span>
<span style="color: #95e454;"> * That is, a copy of the arguments is made and passed to the corresponding parameters.</span>
<span style="color: #95e454;"> * </span><span style="color: #e5786d;">@author</span><span style="color: #95e454;"> Arles</span>
<span style="color: #95e454;"> */</span>
<span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">class</span> <span style="color: #92a65e; font-weight: bold;">TestSwap</span> {

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">swap</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">y</span>) {
        <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">temp</span>; 
        temp = x;
        x = y;
        y = temp;
    }

<span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">main</span>(<span style="color: #92a65e; font-weight: bold;">String</span>[] <span style="color: #cae682;">args</span>) {
        <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">a</span>=4;
        <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">b</span>=5;
        swap(a, b);
        System.out.println(<span style="color: #95e454;">"a="</span> + a); <span style="color: #99968b;">// </span><span style="color: #99968b;">4</span>
        System.out.println(<span style="color: #95e454;">"b="</span> + b); <span style="color: #99968b;">// </span><span style="color: #99968b;">5</span>
    }
</pre>
</div>

<p>
Como se pasan parámetros por valor, los enteros 4 y 5 se copian y luego se asignan a variables temporales, solo existentes
dentro del bloque del método. Las variables `a`y `b` permanecen con su valor original.
</p>
</div>
</li>

<li><a id="sec-1-2-2-1-5-3-1-3-2" name="sec-1-2-2-1-5-3-1-3-2"></a>Con los wrappers Integer()<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-3-2">
<p>
No entendí muy bien por qué esto no funciona. 
</p>
</div>
</li>
<li><a id="sec-1-2-2-1-5-3-1-3-3" name="sec-1-2-2-1-5-3-1-3-3"></a><span class="todo TODO">TODO</span> preguntar<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-3-3">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">class</span> <span style="color: #92a65e; font-weight: bold;">TestSwap2</span> {

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">swap</span>(<span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">x</span>, <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">y</span>) {
        <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">temp</span>;
        temp = x; <span style="color: #99968b;">// </span><span style="color: #99968b;">entra referencia a `a`</span>
        x = y; <span style="color: #99968b;">// </span><span style="color: #99968b;">entra referencia a `y`</span>
        y = temp; <span style="color: #99968b;">// </span><span style="color: #99968b;">pasa referencia a `a`</span>

    }

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">main</span>(<span style="color: #92a65e; font-weight: bold;">String</span>[] <span style="color: #cae682;">args</span>) {
        <span style="color: #92a65e; font-weight: bold;">Integer</span> <span style="color: #cae682;">a</span> = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">Integer</span>(4);
        <span style="color: #92a65e; font-weight: bold;">Integer</span> <span style="color: #cae682;">b</span> = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">Integer</span>(5);
        swap(a, b);
        System.out.println(<span style="color: #95e454;">"a="</span> + a); <span style="color: #99968b;">// </span><span style="color: #99968b;">4</span>
        System.out.println(<span style="color: #95e454;">"b="</span> + b); <span style="color: #99968b;">// </span><span style="color: #99968b;">5</span>
    }
}
</pre>
</div>
</div>
</li>

<li><a id="sec-1-2-2-1-5-3-1-3-4" name="sec-1-2-2-1-5-3-1-3-4"></a>Este sí sirve<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-3-4">
<p>
Puedo crear estructuras de dato de clase objeto.
Si pasamos propiedades de objetos, estamos pasando referencias. Por lo tanto,
modificarlo lo cambia en todas las variables que tengan la referencia.
</p>
<div class="org-src-container">

<pre class="src src-java"><span style="color: #8ac6f2; font-weight: bold;">class</span> <span style="color: #92a65e; font-weight: bold;">Wrapper</span> {

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">obj</span>;
}

<span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">class</span> <span style="color: #92a65e; font-weight: bold;">TestSwap3</span> {

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">swap</span>(<span style="color: #92a65e; font-weight: bold;">Wrapper</span> <span style="color: #cae682;">x</span>, <span style="color: #92a65e; font-weight: bold;">Wrapper</span> <span style="color: #cae682;">y</span>) {
        <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">temp</span> = x.obj;
        x.obj = y.obj;
        y.obj = temp;

<span style="color: #99968b;">// </span><span style="color: #99968b;">El punto aqu&#237; es que x.obj y y.obj tienen la misma referencia que a y b en el main. Por eso *s&#237;* cambia el valor en el main</span>
    }

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">static</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">main</span>(<span style="color: #92a65e; font-weight: bold;">String</span>[] <span style="color: #cae682;">args</span>) {
        <span style="color: #92a65e; font-weight: bold;">Wrapper</span> <span style="color: #cae682;">a</span> = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">Wrapper</span>();
        a.obj = 4;
        <span style="color: #92a65e; font-weight: bold;">Wrapper</span> <span style="color: #cae682;">b</span> = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">Wrapper</span>();
        b.obj = 5;
        swap(a, b);
        System.out.println(<span style="color: #95e454;">"a="</span> + a.obj);
        System.out.println(<span style="color: #95e454;">"b="</span> + b.obj);
    }

}
</pre>
</div>
</div>
</li></ol>
</li>




<li><a id="sec-1-2-2-1-5-3-1-4" name="sec-1-2-2-1-5-3-1-4"></a>Explicación de una lista con clases<br  /><div class="outline-text-9" id="text-1-2-2-1-5-3-1-4">
<p>
Aquí es importante entender cómo funcionan las referencias.
Cada nodo de la lista puede contener a object. Es decir, cualquier cosa. 
</p>

<div class="org-src-container">

<pre class="src src-ditaa:file">+-----------------+     +-----------------+
|  Nodo           |     |   Lista         |
|                 |     |                 |
| info: object    |&lt;--- |  first: Node    |
|                 |     |                 |
| next: Node      |     |                 |
|                 |     |                 |
|                 |     |                 |
+-----------------+     +-----------------+
</pre>
</div>
</div>
</li>


<li><a id="sec-1-2-2-1-5-3-1-5" name="sec-1-2-2-1-5-3-1-5"></a>Objetos<br  /><div class="outline-text-9" id="text-1-2-2-1-5-3-1-5">
<blockquote>
<p>
"Una clase es una colección de atributos y métodos". &#x2013;Arles Rodríguez
</p>
</blockquote>
</div>


<ol class="org-ol"><li><a id="sec-1-2-2-1-5-3-1-5-1" name="sec-1-2-2-1-5-3-1-5-1"></a>herencia: repaso<br  /></li>

<li><a id="sec-1-2-2-1-5-3-1-5-2" name="sec-1-2-2-1-5-3-1-5-2"></a>abstract: repaso<br  /></li>

<li><a id="sec-1-2-2-1-5-3-1-5-3" name="sec-1-2-2-1-5-3-1-5-3"></a>Polimorfismo<br  /><div class="outline-text-10" id="text-1-2-2-1-5-3-1-5-3">
<p>
Como resuelvo 'el problema fundamental del polimorfismo': toca volver a castear hacia abajo.
</p>
<pre class="example">
</pre>
</div>
</li></ol>
</li></ol>
</li></ol>
</li></ol>
</li></ol>
</li></ol>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Lista Lineal</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> ¿Qué es una lista lineal?</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Primero que todo, 
</p>
<ul class="org-ul">
<li>es un ADT (abstract data structure), es decir, su definición está separada de su implementación.
</li>
<li>se define matematicamenta como una secuencia de elementos finitos
</li>
<li>finitos = tiene length
</li>
<li>tienen posición y esta se denota mediante un subindice
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Implementación del ADT</h3>
<div class="outline-text-3" id="text-2-2">
<p>
La implementación más abstracta del linear list dentro de Java viene en la forma de una interfaz:
</p>

<div class="org-src-container">

<pre class="src src-java"><span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">interface</span> <span style="color: #92a65e; font-weight: bold;">LinearList</span> {

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">boolean</span> <span style="color: #cae682;">isEmpty</span>();

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">size</span>();

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">get</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>);

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">indexOf</span>(<span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">theElement</span>);

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">remove</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>);

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">add</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>, <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">theElement</span>);

    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">String</span> <span style="color: #cae682;">toString</span>();
}
</pre>
</div>

<p>
Este contrato satisface la definición según el ADT de una linear list.
</p>

<p>
Ahora bien, la linear list se puede implementar:
</p>
<ol class="org-ol">
<li>Como arreglo
</li>
<li>Como lista enlazada (linked list)
</li>
</ol>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> Linked List</h4>
<div class="outline-text-4" id="text-2-2-1">
</div><ol class="org-ol"><li><a id="sec-2-2-1-1" name="sec-2-2-1-1"></a>Código<br  /><div class="outline-text-5" id="text-2-2-1-1">
<div class="org-src-container">

<pre class="src src-java"><span style="color: #8ac6f2; font-weight: bold;">package</span> <span style="color: #e5786d;">tallerlinearlist</span>;

<span style="color: #8ac6f2; font-weight: bold;">import</span> <span style="color: #e5786d;">utilities</span>.<span style="color: #92a65e; font-weight: bold;">ChangeArrayLength</span>;



<span style="color: #95e454;">/**</span>
<span style="color: #95e454;"> *</span>
<span style="color: #95e454;"> * </span><span style="color: #e5786d;">@author</span><span style="color: #95e454;"> Arles</span>
<span style="color: #95e454;"> */</span>
<span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #8ac6f2; font-weight: bold;">class</span> <span style="color: #92a65e; font-weight: bold;">ArrayLinearList</span> <span style="color: #8ac6f2; font-weight: bold;">implements</span> <span style="color: #92a65e; font-weight: bold;">LinearList</span> {

    <span style="color: #99968b;">// </span><span style="color: #99968b;">data members</span>
    <span style="color: #8ac6f2; font-weight: bold;">protected</span> <span style="color: #92a65e; font-weight: bold;">Object</span>[] <span style="color: #cae682;">element</span>; <span style="color: #99968b;">// </span><span style="color: #99968b;">array of elements</span>
    <span style="color: #8ac6f2; font-weight: bold;">protected</span> <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">size</span>; <span style="color: #99968b;">// </span><span style="color: #99968b;">number of elements in array</span>

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * create a list with initial capacity initialCapacity</span>
<span style="color: #95e454;">     *</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@throws</span><span style="color: #95e454;"> IllegalArgumentException when initialCapacity </span><span style="color: #ccaa8f;">&lt;</span><span style="color: #95e454;"> 1</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #cae682;">ArrayLinearList</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">initialCapacity</span>) {
        <span style="color: #8ac6f2; font-weight: bold;">if</span> (initialCapacity &lt; 1) {
            <span style="color: #8ac6f2; font-weight: bold;">throw</span> <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">IllegalArgumentException</span>(<span style="color: #95e454;">"initialCapacity must be &gt;= 1"</span>);
        }
        element = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">Object</span>[initialCapacity];
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * create a list with initial capacity 10</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #cae682;">ArrayLinearList</span>() {<span style="color: #99968b;">// </span><span style="color: #99968b;">use default capacity of 10</span>
        <span style="color: #8ac6f2; font-weight: bold;">this</span>(10);
    }

    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">boolean</span> <span style="color: #cae682;">isEmpty</span>() {
        <span style="color: #8ac6f2; font-weight: bold;">return</span> size == 0;
    }

    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">size</span>() {
        <span style="color: #8ac6f2; font-weight: bold;">return</span> size;
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@throws</span><span style="color: #95e454;"> IndexOutOfBoundsException when index is not between 0 and size -</span>
<span style="color: #95e454;">     * 1</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">checkIndex</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>) {
        <span style="color: #8ac6f2; font-weight: bold;">if</span> (index &lt; 0 || index &gt;= size) {
            <span style="color: #8ac6f2; font-weight: bold;">throw</span> <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">IndexOutOfBoundsException</span>(<span style="color: #95e454;">"index = "</span> + index + <span style="color: #95e454;">" size = "</span> + size);
        }
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@return</span><span style="color: #95e454;"> element with specified index</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@throws</span><span style="color: #95e454;"> IndexOutOfBoundsException when index is not between 0 and size -</span>
<span style="color: #95e454;">     * 1</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">get</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>) {
        checkIndex(index);
        <span style="color: #8ac6f2; font-weight: bold;">return</span> element[index];
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@return</span><span style="color: #95e454;"> index of first occurrence of theElement, return -1 if theElement</span>
<span style="color: #95e454;">     * not in list</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">indexOf</span>(<span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">theElement</span>) {
        <span style="color: #99968b;">// </span><span style="color: #99968b;">search element[] for theElement</span>
        <span style="color: #8ac6f2; font-weight: bold;">for</span> (<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">i</span> = 0; i &lt; <span style="color: #92a65e; font-weight: bold;">size</span>; i++) {
            <span style="color: #8ac6f2; font-weight: bold;">if</span> (element[i].equals(theElement)) {
                <span style="color: #8ac6f2; font-weight: bold;">return</span> i;
            }
        }
        <span style="color: #99968b;">// </span><span style="color: #99968b;">theElement not found</span>
        <span style="color: #8ac6f2; font-weight: bold;">return</span> -1;
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * Remove the element with specified index. All elements with higher index</span>
<span style="color: #95e454;">     * have their index reduced by 1.</span>
<span style="color: #95e454;">     *</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@throws</span><span style="color: #95e454;"> IndexOutOfBoundsException when index is not between 0 and size -</span>
<span style="color: #95e454;">     * 1</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@return</span><span style="color: #95e454;"> removed element</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">remove</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>) {
        checkIndex(index);
        <span style="color: #99968b;">// </span><span style="color: #99968b;">valid index, shift elements with higher index</span>
        <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">removedElement</span> = element[index];
        <span style="color: #8ac6f2; font-weight: bold;">for</span> (<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">i</span> = index + 1; i &lt; <span style="color: #92a65e; font-weight: bold;">size</span>; i++) {
            element[i - 1] = element[i];
        }
        element[--size] = <span style="color: #e5786d;">null</span>;
        <span style="color: #8ac6f2; font-weight: bold;">return</span> removedElement;
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * All elements with equal or higher index have their index increased by 1.</span>
<span style="color: #95e454;">     *</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@param</span><span style="color: #95e454;"> index</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@param</span><span style="color: #95e454;"> theElement</span>
<span style="color: #95e454;">     * </span><span style="color: #e5786d;">@throws</span><span style="color: #95e454;"> IndexOutOfBoundsException when index is not between 0 and size</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">void</span> <span style="color: #cae682;">add</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">index</span>, <span style="color: #92a65e; font-weight: bold;">Object</span> <span style="color: #cae682;">theElement</span>) {
        <span style="color: #8ac6f2; font-weight: bold;">if</span> (index &lt; 0 || index &gt; size) {
            <span style="color: #8ac6f2; font-weight: bold;">throw</span> <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">IndexOutOfBoundsException</span>(<span style="color: #95e454;">"index = "</span> + index + <span style="color: #95e454;">" size = "</span> + size);
        }
        <span style="color: #8ac6f2; font-weight: bold;">if</span> (size == element.length) <span style="color: #99968b;">// </span><span style="color: #99968b;">no space, double capacity</span>
        {
            element = ChangeArrayLength.changeLength1D(element, 2 * size);
        }
        <span style="color: #99968b;">// </span><span style="color: #99968b;">shift elements right one position</span>
        <span style="color: #8ac6f2; font-weight: bold;">for</span> (<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">i</span> = size - 1; i &gt;= index; i--) {
            element[i + 1] = element[i];
        }
        element[index] = theElement;
        size++;
    }

    <span style="color: #95e454;">/**</span>
<span style="color: #95e454;">     * convert to a string</span>
<span style="color: #95e454;">     */</span>
    <span style="color: #e5786d;">@Override</span>
    <span style="color: #8ac6f2; font-weight: bold;">public</span> <span style="color: #92a65e; font-weight: bold;">String</span> <span style="color: #cae682;">toString</span>() {
        <span style="color: #92a65e; font-weight: bold;">StringBuffer</span> <span style="color: #cae682;">s</span> = <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">StringBuffer</span>(<span style="color: #95e454;">"["</span>);
        <span style="color: #99968b;">// </span><span style="color: #99968b;">put elements into the buffer</span>
        <span style="color: #8ac6f2; font-weight: bold;">for</span> (<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">i</span> = 0; i &lt; <span style="color: #92a65e; font-weight: bold;">size</span>; i++) {
            <span style="color: #8ac6f2; font-weight: bold;">if</span> (element[i] == <span style="color: #e5786d;">null</span>) {
                s.append(<span style="color: #95e454;">"null, "</span>);
            } <span style="color: #8ac6f2; font-weight: bold;">else</span> {
                s.append(element[i].toString() + <span style="color: #95e454;">", "</span>);
            }
        }
        <span style="color: #8ac6f2; font-weight: bold;">if</span> (size &gt; 0) {
            s.delete(s.length() - 2, s.length());
        }
        s.append(<span style="color: #95e454;">"]"</span>);
        <span style="color: #99968b;">// </span><span style="color: #99968b;">create equivalent String</span>
        <span style="color: #8ac6f2; font-weight: bold;">return</span> <span style="color: #8ac6f2; font-weight: bold;">new</span> <span style="color: #92a65e; font-weight: bold;">String</span>(s);
    }
</pre>
</div>
</div>
</li></ol>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> Comentario</h4>
<div class="outline-text-4" id="text-2-2-2">
<ul class="org-ul">
<li>hay una distinción entre size y length
</li>
<li>size = numero de elementos el arreglo
</li>
<li>size es un contador que se incrementa con cada llamada a add()
</li>
<li>length es el 'initial capacity', según lo dictamina la definición de un arreglo. (hay que saber de qué tamaño es el arreglo antes de inicializarlo)
</li>
<li>el length solo se  toca 1) en el constructor,
</li>
<li>por defecto es 10 según la política de java,
</li>
<li>y 2) cuando size = length al agregar más elementos que los que permite su capacidad inicial
</li>
<li>En ese caso se llama changeArraylength(), que duplica su capacidad (O(n<sup>2</sup>))
</li>
<li>Dentro de changeArrayLength() se hace una llamada al sistema con <b>arrayCopy()</b>
</li>
<li>Lo que hace array copy es qu directamente copia los bytes desde una posición en memoria a otra
</li>
<li>es mucho más rápido que trabajar con las abstracciones de un lenguaje de programación
</li>
<li>se hace un shift de todos los elementos para ingresarlo en el indez
</li>
<li>curiosidad: checkindex se abstrae porque es más cómodo
</li>
<li>muchos métodos retornan -1, según lo estipula el ADT
</li>
<li>el toString() hace append una string "null" si es nulo. (Soluciona lo de null pointer exception)
</li>
<li>se usa el StringBuffer para concatenar cómodamente
</li>
<li>Se cuenta con el hecho de que cada elemento tenga su correspondiente toString(),
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-02-05 Tue&gt;</span></span></p>
<p class="author">Author: Jonatan Ahumada Fernández</p>
<p class="date">Created: 2019-03-13 Wed 18:23</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
