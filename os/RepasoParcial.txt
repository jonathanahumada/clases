	   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	       INTRODUCCIÓN A SISTEMAS OPERATIVOS SISTEMA
	       OPERATIVO: DEFINICIÓN PROCESOS PROCESOS_2
			  REPASO: COMANDOS DOS


		       Jonatan Ahumada Fernández
	   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


			    <2019-02-9 Sun>


Table of Contents
─────────────────

1 Temas
.. 1.1 Arquitectura Computador
.. 1.2 Funciones y objetivos de los S.O
2 Contenido Temático
3 Notas
.. 3.1 Cómo se definiría un sistema operativo?
..... 3.1.1 OS
..... 3.1.2 Operaciones del SO
..... 3.1.3 Llamadas al sistema
..... 3.1.4 Evolución del OS
..... 3.1.5 Tarea : hacer mapa conceptual de todo lo visto hasta hora
4 Concurrencia
.. 4.1 Parcial
.. 4.2 Como un SO soluciona la concurrencia
.. 4.3 Recurso compartido
.. 4.4 Sección crítica
.. 4.5 tres fenomenos decConcurrencia
.. 4.6 algoritmos para solucionar concurrencia
.. 4.7 Ejemplo 1





1 Temas
═══════

1.1 Arquitectura Computador
───────────────────────────


1.2 Funciones y objetivos de los S.O
────────────────────────────────────

  • Descripción y control de los procesos
  • Procesos, subprocesos e hilos de procesos


2 Contenido Temático
════════════════════

  • Concurrencia
  • Gestión de memoria.
  • Planificación en sistemas operativos
  • Gestión de entrada/salida y planificacion de disco
  • Gestion de archivos
  • Introduccion a la Seguridad en S.O
  • Introducción a las redes


3 Notas
═══════

  • Taller/Lab 60%
  • Parcial 40%

  *Introduccion a los sistemas operativos


3.1 Cómo se definiría un sistema operativo?
───────────────────────────────────────────

  Es un software que se encarga de tres(?) funciones:
  1) Admin. recursos de la computador
  2) Correr los programas
  3) Interactuar con el usuario.

  Algunos detalles interesantes:
  • Es una intrerfaz doble, con el usuario y con el hardware.
  • Oculta al programador los detalles de hardware.


3.1.1 OS
╌╌╌╌╌╌╌╌

◊ 3.1.1.1 Como interfaz

  ◊ 3.1.1.1.1 Interfaces

    1) linea de comandos
    2) gráfico


  ◊ 3.1.1.1.2 Tareas principales

    1) Creación programas
    2) Ejecución Prog.
    3) Acceso a disp. de entradas y salidas
    4) Acceso controlado a los archivos
    5) Acceso al sistema (usuario, privilegios, etc)
    6) Detección y respuesta a errores
    7) Estadísticias de utilización de recursos


◊ 3.1.1.2 Como administrador de recursos

     Ofrece una distribucion ordenada y controlado de los procesadores,
  memorias, disp de i/o entre los diversos programas que compiten entre
  ellos.


  ◊ 3.1.1.2.1 Kernel : programa más importante


3.1.2 Operaciones del SO
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

◊ 3.1.2.1 Descripción y control de procesos

  Asignar recursos a procesos, permitir el intercambio de inf. entre
  ellos. , proteger los recursos y sincronizarlos.  Y describirlos:
  1) darles un id
  2) contexto de ejecución.
  hardware asociado: procesador


◊ 3.1.2.2 Control de concurrencia

  Asegurar los procesos se intercalen exitosamente en el tiempo dando la
  apariencia de una ejecución simultánea.  Los que concurren son los
  procesos. Existen : algoritmos de control de concrureencia


◊ 3.1.2.3 Gestión de Memoria

  1) Des/cargar hacia el almacenamiento secundario.
  2) Paginación (bloques de) = recursos memoria a diferentes
     aplicaciones.


◊ 3.1.2.4 Planificación

  Repartir los recursos del sistema entre necesidades potencialmente
  competitiva teniendo en cuenta niveles de prioridad y plazos.
  Ejemplo: 'programa no responde'.  para inicio y terminación de
  procesos.


◊ 3.1.2.5 Gestión de entrada y salida

  Puertos


◊ 3.1.2.6 Gestion de archivos


◊ 3.1.2.7 Seguridad

  • Firewall
  • Privilegios de usuario / lectura /escritura


◊ 3.1.2.8 Gestion de redes

  • Todo OS moderno debe tener esto.
  • la ´nube'' = red de servidores de topología indefinida.


3.1.3 Llamadas al sistema
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌


3.1.4 Evolución del OS
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  1) Hombre-máquina = no había OS. Solo procesos en serie.
  2) Procesos por lotes = procesos en serie, monitor del sistema
     (cargabas los programas y luego se ejecutaban en serie)
  3) Proceos por lotes con multiprogramación
  4) Sistemas de tiempo compartido = multiprocesamiento
     multiprogramacion (intercalaba el uso del procesador) !=
     multiprocesamiento (al mismo tiempo)


3.1.5 Tarea : hacer mapa conceptual de todo lo visto hasta hora
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  Mindomo Cmaptools

  [./mapa_conceptual.png]


◊ 3.1.5.1 Terminar conceptos

  ◊ 3.1.5.1.1 Concepto de proceso

          "el proceso se puede definir como un programa en
          ejecución y, de una forma un poco más precisa, como la
          unidad de procesamiento gestionada por el sistema
          operativo."  – Jesús Carretero
       La mayoría de os está basado en procesos. Para definirlo: Una
    actividad que se está desarrollando:
    1) asociado a programa ejecutable
    2) datos asociados o variables: debe haber un recurso de memoria
       asignado a ese proceso.
    3) contexto de ejecución


  ◊ 3.1.5.1.2 ¿Qué datos están asociados al proceso?

          "Una parte muy importante de estas informaciones se
          encuentra en el llamado bloque de control del proceso
          (BCP). El sistema operativo mantiene una tabla de
          procesos con todos los BCP de los procesos. Por razones
          de eficiencia, la tabla de procesos se construye
          normalmente como una estructura estática, que tiene un
          determinado número de BCP, todos ellos del mismo
          tamaño. El contenido del BCP se analizará con más
          detalle en secciones posteriores; sin embargo, de manera
          introductoria se puede decir que la información que
          compone un proceso es la siguiente:
          • Contenido de los segmentos de memoria en los que
            residen el código y los datos del proceso. A esta
            información se le denomina imagen de memoria o core
            image.
          • Contenido de los registros del modelo de programación.
          • Contenido del BCP."
          – Jesus Carretero


  ◊ 3.1.5.1.3 ¿Qué es un entorno de ejecución?

          "El entorno del proceso consiste en un conjunto de
          variables que se le pasan al proceso en el momento de su
          creación.  El entorno está formado por una tabla
          NOMBRE-VALOR que se incluye en la pila del proceso. El
          NOMBRE especifica el nombre de la variable y el VALOR su
          valor. Un ejemplo de entorno en UNIX es el siguiente:

          • PATH=/ USR/ bin: / home / pepe / bin TERM= vt 100
          • HOME= /home/pepe
          • PWD= / home /pepe /libros / primero


          En este ejemplo, PATH indica la lista de directorios en
          los que el sistema operativo busca los programas
          ejecutables, TERM el tipo de terminal, HOME el
          directorio inicial asociado al usuario y PWD cl
          directorio de trabajo actual.  Los procesos pueden
          utilizar las variables del entorno para definir su
          comportamiento. Por ejemplo, un programa de edición
          responderá a las teclas de acuerdo al tipo de terminal
          que esté utilizando el usuario, que viene definido en la
          variable TERM.  "


  ◊ 3.1.5.1.4 Estados

    Normalmente los procesos se encuentran en determinado estado:
    1) ejecución
    2) espera
    3) terminado
    4) esperando recursos


  ◊ 3.1.5.1.5 Historia

    El concepto 'proceso' ha venido evolucionando:
    1) lotes multiprogramación
    2) interrupciones


  ◊ 3.1.5.1.6 Características

    Hasta que ese nuevo evento deje de suceder, no va a cambiar de
    estado.  Si no exitirera las eventualidades, tocaría esperar a que
    terminara el programa.
    1) sincronización incorrecta
    2) fallos de exclusión mutua:
    que un usuario o un programa trate de usar un recurso compartido de
    forma simultánea.  Ej: 2 personas compran la misma silla en el mismo
    tiempo.  El so tiene que estar en capacidad de reservar ese espacio
    a uno de los 2.
    1) Funcionamiento no determinista del programa.
    Cuando los programas comparten memoria pueden sobreescribirse sin
    previo avisa.  El sistema operativo debe estar en capacidad de
    manejar colas.
    1) interbloqueo de operaciones
    Tengo aplicacion a y b y van a guardar información a memoria y
    unidad de cd, respectivamente.  Ambas podrían quedar esperando a la
    otra a que termine.


  ◊ 3.1.5.1.7 memoria virtual

    Hace uso del almacenamiento primario y secundario.


    ◊ 3.1.5.1.7.1 paginación

      Cada proceso hace uso de la memoria y podría haber
      sobreescritura. La paginación impide esto.


◊ 3.1.5.2 Herramientas de supervisión de recursos

  ◊ 3.1.5.2.1 tipos

    ◊ 3.1.5.2.1.1 tiempo real


    ◊ 3.1.5.2.1.2 registrada

      1) Estadística. Ej: servidores.


  ◊ 3.1.5.2.2 Qué se supervisa

    1) Memoria
    2) Disco
    3) CPU
    4) Red


  ◊ 3.1.5.2.3 windows

    1) administrador de tareas
    2) monitor de rendimiento


    ◊ 3.1.5.2.3.1 Recordar: 3 elementos

      • ejecutable
      • datos asociados
      • contexto de ejecución


    ◊ 3.1.5.2.3.2 Repaso: características

      funcionamiento no determinista
      • interbloqueo
      • concurrencia
      • etc.

      Estas características se ven plasmadas en los modelos de gestión
      de procesos.  El aspecto práctico de esto será visto en el
      ejercicio de más abajo.


    ◊ 3.1.5.2.3.3 Modelos

      1) de dos estados
      2) de cinco estados (el que es )


    ◊ 3.1.5.2.3.4 Anotaciones:

      • no es lo mismo un proceso que sale, que uno interumpido. el
        interrumpido queda con variables asociadas. El de salida libera
        memoria.
      • un proceso puede pasar de liso a terminado sin pasar por
        ejecución.


    ◊ 3.1.5.2.3.5 colas o hilos


    ◊ 3.1.5.2.3.6 Ejercicio de ejemplo

      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       proceso  accion que solicita        memoria requerida  resultado/efecto de solicitud                           memoria restante 
                                                                                                                                 
       p1       ejecución                  128 mb             p1 -> ejecucion                                         256 -128=128mb   
       p2       ejecucion                  128  mb            p1->listo no puede ejecutar,porque p1 no ha finalizado  0 mb             
       p3       ejecucion                  64 mb              p3-> nuevo, no hay recursos que asignarle               0mb              
       p1       terminar                   -                  p1->terminado , p2->ejecucion p3 ->listo                64 mb            
       p2       lectura de datos en disco  -                  p2->bloqueado, p3->ejecución                            64 mb            
       p4       ejecucion                  128                p4 ->nuevo                                              64 mb            
       p2       fin lectura datos          -                  p2 ->listo                                              64 mb            
       p3       terminado                  -                  p3->terminado, p4->listo,p2->ejecucion                  0                
       p5       ejecucion                  64                 p5->nuevo                                               0                
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━




      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       p. nuevo  p. ejecucion  cola de listos  bloqueados  terminados  memoria 
       p5        p2            p4                       0  p1 p3             0 
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


      ◊ 3.1.5.2.3.6.1 Comandos usados en la actividad

        • CD
        • COPY [PATH1 + PATH2 + FILENAME]
        • MOVE
        • DIR
        • RD [/S: recursiva] *En principio solo elimine dir vacios
        • DELTREE
        • TREE
        • MKDIR
        • ECHO
        • > ('redirect')
        • >> ('append')


4 Concurrencia
══════════════

4.1 Parcial
───────────

  1) conceptos SO (concurrencia, interrupciones, exclusion mutua)
  2) Comandos DOS
  3) Procesos
  4) Concurrencia


4.2 Como un SO soluciona la concurrencia
────────────────────────────────────────


4.3 Recurso compartido
──────────────────────


4.4 Sección crítica
───────────────────


4.5 tres fenomenos decConcurrencia
──────────────────────────────────

  • exclusión mutua Prohibir demás procesos de realizar una accion
    cuando uno haya obtenido permiso
  • interbloqueo
  • inanicion


4.6 algoritmos para solucionar concurrencia
───────────────────────────────────────────

  • Dekker 1.0 Puede dejer interbloqeo Puede dejar inanicion
  • Dekker 2.0 Puede persistir interbloqueo Ventaja: lapsos de tiempo
    para pedir el turno
  • Petersen Mas eficiente que Dekker


4.7 Ejemplo 1
─────────────

  ━━━━━━━━━━━━━━━
   P1= 0  P1++   
   P2=0   P2 +=2 
  ━━━━━━━━━━━━━━━

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   Secuencia ejecucion  procedimiento ejecutandose  valor p1  valor p2  observaciones             
                     1  p1                                 1         0  inicia p1                 
                     2  p2                                 1         2  inicia p2                 
                     3  p1                                 2         2  -                         
                     4  p2                                 2         4  -                         
                     5  p1                                 3         4  -                         
                     6  p2                                 3         6  inicia sección critica p2 
                     7  p2                                 3         8  -                         
                     8  p2                                 3        10  -                         
                     9  p2                                 3        12  fin sección critica p2    
                    10  p1                                 4        12  inicia sección crítica p1 
                    11  p1                                 5        12  -                         
                    12  p1                                 6        12  -                         
                    13  p1                                 7        12  fin sección critica p1    
                    14  p2                                 7        14  -                         
                    15  p1                                 8        14  -                         
                    16  p2                                 8        16  finaliza p2               
                    17  p1                                 9        16  -                         
                    18  p1                                10        16  finaliza p1               
                                                                                                
                                                                                                
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
